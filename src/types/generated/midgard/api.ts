// tslint:disable
/**
 * Midgard Public API
 * The Midgard Public API queries THORChain and any chains linked via the BifrÃ¶st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: devs@thorchain.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    chain?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    ticker?: string;
}
/**
 * 
 * @export
 * @interface AssetDetail
 */
export interface AssetDetail {
    /**
     * 
     * @type {Asset}
     * @memberof AssetDetail
     */
    asset?: Asset;
    /**
     * 
     * @type {number}
     * @memberof AssetDetail
     */
    dateCreated?: number;
    /**
     * 
     * @type {string}
     * @memberof AssetDetail
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetDetail
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof AssetDetail
     */
    priceRune?: number;
}
/**
 * 
 * @export
 * @interface Coin
 */
export interface Coin {
    /**
     * 
     * @type {number}
     * @memberof Coin
     */
    amount?: number;
    /**
     * 
     * @type {Asset}
     * @memberof Coin
     */
    asset?: Asset;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    fee?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    slip?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    stakeUnits?: number;
}
/**
 * 
 * @export
 * @interface Gas
 */
export interface Gas {
    /**
     * 
     * @type {number}
     * @memberof Gas
     */
    amount?: number;
    /**
     * 
     * @type {Asset}
     * @memberof Gas
     */
    asset?: Asset;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    error: string;
}
/**
 * 
 * @export
 * @interface Option
 */
export interface Option {
    /**
     * 
     * @type {number}
     * @memberof Option
     */
    asymmetry?: number;
    /**
     * 
     * @type {number}
     * @memberof Option
     */
    priceTarget?: number;
    /**
     * 
     * @type {number}
     * @memberof Option
     */
    withdrawBasisPoints?: number;
}
/**
 * 
 * @export
 * @interface PoolDetail
 */
export interface PoolDetail {
    /**
     * 
     * @type {Asset}
     * @memberof PoolDetail
     */
    asset?: Asset;
    /**
     * Total current Asset balance
     * @type {number}
     * @memberof PoolDetail
     */
    assetDepth?: number;
    /**
     * Asset return on investment
     * @type {number}
     * @memberof PoolDetail
     */
    assetROI?: number;
    /**
     * Total Asset staked
     * @type {number}
     * @memberof PoolDetail
     */
    assetStakedTotal?: number;
    /**
     * Number of RUNE->ASSET transactions
     * @type {number}
     * @memberof PoolDetail
     */
    buyAssetCount?: number;
    /**
     * Average sell Asset fee size for RUNE->ASSET (in ASSET)
     * @type {number}
     * @memberof PoolDetail
     */
    buyFeeAverage?: number;
    /**
     * Total fees (in Asset)
     * @type {number}
     * @memberof PoolDetail
     */
    buyFeesTotal?: number;
    /**
     * Average trade slip for RUNE->ASSET in %
     * @type {number}
     * @memberof PoolDetail
     */
    buySlipAverage?: number;
    /**
     * Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
     * @type {number}
     * @memberof PoolDetail
     */
    buyTxAverage?: number;
    /**
     * Total Asset buy volume (RUNE->ASSET) (in Asset)
     * @type {number}
     * @memberof PoolDetail
     */
    buyVolume?: number;
    /**
     * Total depth of both sides (in RUNE)
     * @type {number}
     * @memberof PoolDetail
     */
    poolDepth?: number;
    /**
     * Average pool fee
     * @type {number}
     * @memberof PoolDetail
     */
    poolFeeAverage?: number;
    /**
     * Total fees
     * @type {number}
     * @memberof PoolDetail
     */
    poolFeesTotal?: number;
    /**
     * Pool ROI (average of RUNE and Asset ROI)
     * @type {number}
     * @memberof PoolDetail
     */
    poolROI?: number;
    /**
     * Pool ROI over 12 months
     * @type {number}
     * @memberof PoolDetail
     */
    poolROI12?: number;
    /**
     * Average pool slip
     * @type {number}
     * @memberof PoolDetail
     */
    poolSlipAverage?: number;
    /**
     * Rune value staked Total
     * @type {number}
     * @memberof PoolDetail
     */
    poolStakedTotal?: number;
    /**
     * Average pool transaction
     * @type {number}
     * @memberof PoolDetail
     */
    poolTxAverage?: number;
    /**
     * Total pool units outstanding
     * @type {number}
     * @memberof PoolDetail
     */
    poolUnits?: number;
    /**
     * Two-way volume of all-time (in RUNE)
     * @type {number}
     * @memberof PoolDetail
     */
    poolVolume?: number;
    /**
     * Two-way volume in 24hrs (in RUNE)
     * @type {number}
     * @memberof PoolDetail
     */
    poolVolume24hr?: number;
    /**
     * Price of Asset (in RUNE).
     * @type {number}
     * @memberof PoolDetail
     */
    price?: number;
    /**
     * Total current Rune balance
     * @type {number}
     * @memberof PoolDetail
     */
    runeDepth?: number;
    /**
     * RUNE return on investment
     * @type {number}
     * @memberof PoolDetail
     */
    runeROI?: number;
    /**
     * Total RUNE staked
     * @type {number}
     * @memberof PoolDetail
     */
    runeStakedTotal?: number;
    /**
     * Number of ASSET->RUNE transactions
     * @type {number}
     * @memberof PoolDetail
     */
    sellAssetCount?: number;
    /**
     * Average buy Asset fee size for ASSET->RUNE (in RUNE)
     * @type {number}
     * @memberof PoolDetail
     */
    sellFeeAverage?: number;
    /**
     * Total fees (in RUNE)
     * @type {number}
     * @memberof PoolDetail
     */
    sellFeesTotal?: number;
    /**
     * Average trade slip for ASSET->RUNE in %
     * @type {number}
     * @memberof PoolDetail
     */
    sellSlipAverage?: number;
    /**
     * Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
     * @type {number}
     * @memberof PoolDetail
     */
    sellTxAverage?: number;
    /**
     * Total Asset sell volume (ASSET>RUNE) (in RUNE).
     * @type {number}
     * @memberof PoolDetail
     */
    sellVolume?: number;
    /**
     * Number of stake transactions
     * @type {number}
     * @memberof PoolDetail
     */
    stakeTxCount?: number;
    /**
     * Number of unique stakers
     * @type {number}
     * @memberof PoolDetail
     */
    stakersCount?: number;
    /**
     * Number of stake & withdraw transactions
     * @type {number}
     * @memberof PoolDetail
     */
    stakingTxCount?: number;
    /**
     * 
     * @type {string}
     * @memberof PoolDetail
     */
    status?: PoolDetailStatusEnum;
    /**
     * Number of unique swappers interacting with pool
     * @type {number}
     * @memberof PoolDetail
     */
    swappersCount?: number;
    /**
     * Number of swapping transactions in the pool (buys and sells)
     * @type {number}
     * @memberof PoolDetail
     */
    swappingTxCount?: number;
    /**
     * Number of withdraw transactions
     * @type {number}
     * @memberof PoolDetail
     */
    withdrawTxCount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum PoolDetailStatusEnum {
    Bootstrapped = 'bootstrapped',
    Enabled = 'enabled',
    Disabled = 'disabled'
}

/**
 * 
 * @export
 * @interface StakersAddressData
 */
export interface StakersAddressData {
    /**
     * 
     * @type {Array<Asset>}
     * @memberof StakersAddressData
     */
    poolsArray?: Array<Asset>;
    /**
     * Total value of earnings (in RUNE) across all pools.
     * @type {number}
     * @memberof StakersAddressData
     */
    totalEarned?: number;
    /**
     * Average of all pool ROIs.
     * @type {number}
     * @memberof StakersAddressData
     */
    totalROI?: number;
    /**
     * Total staked (in RUNE) across all pools.
     * @type {number}
     * @memberof StakersAddressData
     */
    totalStaked?: number;
}
/**
 * 
 * @export
 * @interface StakersAssetData
 */
export interface StakersAssetData {
    /**
     * 
     * @type {Asset}
     * @memberof StakersAssetData
     */
    asset?: Asset;
    /**
     * Value of Assets earned from the pool.
     * @type {number}
     * @memberof StakersAssetData
     */
    assetEarned?: number;
    /**
     * ROI of the Asset side
     * @type {number}
     * @memberof StakersAssetData
     */
    assetROI?: number;
    /**
     * Amount of Assets staked.
     * @type {number}
     * @memberof StakersAssetData
     */
    assetStaked?: number;
    /**
     * 
     * @type {number}
     * @memberof StakersAssetData
     */
    dateFirstStaked?: number;
    /**
     * Total value of earnings (in RUNE).
     * @type {number}
     * @memberof StakersAssetData
     */
    poolEarned?: number;
    /**
     * Average ROI (in RUNE) of both sides
     * @type {number}
     * @memberof StakersAssetData
     */
    poolROI?: number;
    /**
     * RUNE value staked.
     * @type {number}
     * @memberof StakersAssetData
     */
    poolStaked?: number;
    /**
     * Value of RUNE earned from the pool.
     * @type {number}
     * @memberof StakersAssetData
     */
    runeEarned?: number;
    /**
     * ROI of the Rune side.
     * @type {number}
     * @memberof StakersAssetData
     */
    runeROI?: number;
    /**
     * Amount of RUNE staked.
     * @type {number}
     * @memberof StakersAssetData
     */
    runeStaked?: number;
    /**
     * Represents ownership of a pool.
     * @type {number}
     * @memberof StakersAssetData
     */
    stakeUnits?: number;
}
/**
 * 
 * @export
 * @interface StatsData
 */
export interface StatsData {
    /**
     * Daily active users (unique addresses interacting)
     * @type {number}
     * @memberof StatsData
     */
    dailyActiveUsers?: number;
    /**
     * Daily transactions
     * @type {number}
     * @memberof StatsData
     */
    dailyTx?: number;
    /**
     * Monthly active users
     * @type {number}
     * @memberof StatsData
     */
    monthlyActiveUsers?: number;
    /**
     * Monthly transactions
     * @type {number}
     * @memberof StatsData
     */
    monthlyTx?: number;
    /**
     * Number of active pools
     * @type {number}
     * @memberof StatsData
     */
    poolCount?: number;
    /**
     * Total buying transactions
     * @type {number}
     * @memberof StatsData
     */
    totalAssetBuys?: number;
    /**
     * Total selling transactions
     * @type {number}
     * @memberof StatsData
     */
    totalAssetSells?: number;
    /**
     * Total RUNE balances
     * @type {number}
     * @memberof StatsData
     */
    totalDepth?: number;
    /**
     * Total earned (in RUNE Value).
     * @type {number}
     * @memberof StatsData
     */
    totalEarned?: number;
    /**
     * Total staking transactions
     * @type {number}
     * @memberof StatsData
     */
    totalStakeTx?: number;
    /**
     * Total staked (in RUNE Value).
     * @type {number}
     * @memberof StatsData
     */
    totalStaked?: number;
    /**
     * Total transactions
     * @type {number}
     * @memberof StatsData
     */
    totalTx?: number;
    /**
     * Total unique swappers & stakers
     * @type {number}
     * @memberof StatsData
     */
    totalUsers?: number;
    /**
     * Total (in RUNE Value) of all assets swapped since start.
     * @type {number}
     * @memberof StatsData
     */
    totalVolume?: number;
    /**
     * Total (in RUNE Value) of all assets swapped in 24hrs
     * @type {number}
     * @memberof StatsData
     */
    totalVolume24hr?: number;
    /**
     * Total withdrawing transactions
     * @type {number}
     * @memberof StatsData
     */
    totalWithdrawTx?: number;
}
/**
 * 
 * @export
 * @interface ThorchainEndpoint
 */
export interface ThorchainEndpoint {
    /**
     * 
     * @type {string}
     * @memberof ThorchainEndpoint
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof ThorchainEndpoint
     */
    chain?: string;
    /**
     * 
     * @type {string}
     * @memberof ThorchainEndpoint
     */
    pubKey?: string;
}
/**
 * 
 * @export
 * @interface ThorchainEndpoints
 */
export interface ThorchainEndpoints {
    /**
     * 
     * @type {Array<ThorchainEndpoint>}
     * @memberof ThorchainEndpoints
     */
    current?: Array<ThorchainEndpoint>;
}
/**
 * 
 * @export
 * @interface Tx
 */
export interface Tx {
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    address?: string;
    /**
     * 
     * @type {Array<Coin>}
     * @memberof Tx
     */
    coins?: Array<Coin>;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    memo?: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    txID?: string;
}
/**
 * 
 * @export
 * @interface TxDetails
 */
export interface TxDetails {
    /**
     * 
     * @type {number}
     * @memberof TxDetails
     */
    date?: number;
    /**
     * 
     * @type {Event}
     * @memberof TxDetails
     */
    events?: Event;
    /**
     * 
     * @type {Gas}
     * @memberof TxDetails
     */
    gas?: Gas;
    /**
     * 
     * @type {number}
     * @memberof TxDetails
     */
    height?: number;
    /**
     * 
     * @type {Tx}
     * @memberof TxDetails
     */
    _in?: Tx;
    /**
     * 
     * @type {Option}
     * @memberof TxDetails
     */
    options?: Option;
    /**
     * 
     * @type {Tx}
     * @memberof TxDetails
     */
    out?: Tx;
    /**
     * 
     * @type {Asset}
     * @memberof TxDetails
     */
    pool?: Asset;
    /**
     * 
     * @type {string}
     * @memberof TxDetails
     */
    status?: TxDetailsStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof TxDetails
     */
    type?: TxDetailsTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TxDetailsStatusEnum {
    Success = 'success',
    Refund = 'refund',
    PriceCancelled = 'priceCancelled'
}
/**
    * @export
    * @enum {string}
    */
export enum TxDetailsTypeEnum {
    Sell = 'sell',
    Buy = 'buy',
    CrossPool = 'crossPool',
    Stake = 'stake',
    Withdraw = 'withdraw'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price. The logo is sourced from an internal database.
         * @summary Get Asset Information
         * @param {string} asset Unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInfo(asset: string, options: any = {}): RequestArgs {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getAssetInfo.');
            }
            const localVarPath = `/v1/assets/{asset}`
                .replace(`{${"asset"}}`, encodeURIComponent(String(asset)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing the health response of the API.
         * @summary Get Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth(options: any = {}): RequestArgs {
            const localVarPath = `/v1/health`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array containing all the assets supported on BEPSwap pools
         * @summary Get Asset Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPools(options: any = {}): RequestArgs {
            const localVarPath = `/v1/pools`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing all the pool data for that asset. All assets on BEPSwap have associated pools.
         * @summary Get Pools Data
         * @param {string} asset Unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolsData(asset: string, options: any = {}): RequestArgs {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getPoolsData.');
            }
            const localVarPath = `/v1/pools/{asset}`
                .replace(`{${"asset"}}`, encodeURIComponent(String(asset)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing staking data for the specified staker and pool.
         * @summary Get Staker Pool Data
         * @param {string} address Unique staker address
         * @param {string} asset Unique asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressAndAssetData(address: string, asset: string, options: any = {}): RequestArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getStakersAddressAndAssetData.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getStakersAddressAndAssetData.');
            }
            const localVarPath = `/v1/stakers/{address}/{asset}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"asset"}}`, encodeURIComponent(String(asset)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array containing all the pools the staker is staking in.
         * @summary Get Staker Data
         * @param {string} address Unique staker address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressData(address: string, options: any = {}): RequestArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getStakersAddressData.');
            }
            const localVarPath = `/v1/stakers/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array containing the addresses for all stakers.
         * @summary Get Stakers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersData(options: any = {}): RequestArgs {
            const localVarPath = `/v1/stakers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing global stats for all pools and all transactions.
         * @summary Get Global Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options: any = {}): RequestArgs {
            const localVarPath = `/v1/stats`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode
         * @summary Get the Proxied Pool Addresses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThorchainProxiedEndpoints(options: any = {}): RequestArgs {
            const localVarPath = `/v1/thorchain/pool_addresses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetails(address: string, options: any = {}): RequestArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getTxDetails.');
            }
            const localVarPath = `/v1/tx/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {string} asset An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAddressAsset(address: string, asset: string, options: any = {}): RequestArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getTxDetailsByAddressAsset.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getTxDetailsByAddressAsset.');
            }
            const localVarPath = `/v1/tx/{address}/asset/{asset}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"asset"}}`, encodeURIComponent(String(asset)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {string} txid An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAddressTxId(address: string, txid: string, options: any = {}): RequestArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getTxDetailsByAddressTxId.');
            }
            // verify required parameter 'txid' is not null or undefined
            if (txid === null || txid === undefined) {
                throw new RequiredError('txid','Required parameter txid was null or undefined when calling getTxDetailsByAddressTxId.');
            }
            const localVarPath = `/v1/tx/{address}/txid/{txid}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"txid"}}`, encodeURIComponent(String(txid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} asset An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAsset(asset: string, options: any = {}): RequestArgs {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getTxDetailsByAsset.');
            }
            const localVarPath = `/v1/tx/asset/{asset}`
                .replace(`{${"asset"}}`, encodeURIComponent(String(asset)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price. The logo is sourced from an internal database.
         * @summary Get Asset Information
         * @param {string} asset Unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInfo(asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetDetail> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAssetInfo(asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an object containing the health response of the API.
         * @summary Get Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getHealth(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array containing all the assets supported on BEPSwap pools
         * @summary Get Asset Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPools(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Asset>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPools(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an object containing all the pool data for that asset. All assets on BEPSwap have associated pools.
         * @summary Get Pools Data
         * @param {string} asset Unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolsData(asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolDetail> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPoolsData(asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an object containing staking data for the specified staker and pool.
         * @summary Get Staker Pool Data
         * @param {string} address Unique staker address
         * @param {string} asset Unique asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressAndAssetData(address: string, asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakersAssetData> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersAddressAndAssetData(address, asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array containing all the pools the staker is staking in.
         * @summary Get Staker Data
         * @param {string} address Unique staker address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressData(address: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakersAddressData> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersAddressData(address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array containing the addresses for all stakers.
         * @summary Get Stakers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersData(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersData(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an object containing global stats for all pools and all transactions.
         * @summary Get Global Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsData> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStats(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode
         * @summary Get the Proxied Pool Addresses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThorchainProxiedEndpoints(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainEndpoints> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getThorchainProxiedEndpoints(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetails(address: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TxDetails>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getTxDetails(address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {string} asset An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAddressAsset(address: string, asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TxDetails>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getTxDetailsByAddressAsset(address, asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {string} txid An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAddressTxId(address: string, txid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TxDetails>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getTxDetailsByAddressTxId(address, txid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} asset An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAsset(asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TxDetails>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getTxDetailsByAsset(asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price. The logo is sourced from an internal database.
         * @summary Get Asset Information
         * @param {string} asset Unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInfo(asset: string, options?: any): AxiosPromise<AssetDetail> {
            return DefaultApiFp(configuration).getAssetInfo(asset, options)(axios, basePath);
        },
        /**
         * Returns an object containing the health response of the API.
         * @summary Get Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getHealth(options)(axios, basePath);
        },
        /**
         * Returns an array containing all the assets supported on BEPSwap pools
         * @summary Get Asset Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPools(options?: any): AxiosPromise<Array<Asset>> {
            return DefaultApiFp(configuration).getPools(options)(axios, basePath);
        },
        /**
         * Returns an object containing all the pool data for that asset. All assets on BEPSwap have associated pools.
         * @summary Get Pools Data
         * @param {string} asset Unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolsData(asset: string, options?: any): AxiosPromise<PoolDetail> {
            return DefaultApiFp(configuration).getPoolsData(asset, options)(axios, basePath);
        },
        /**
         * Returns an object containing staking data for the specified staker and pool.
         * @summary Get Staker Pool Data
         * @param {string} address Unique staker address
         * @param {string} asset Unique asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressAndAssetData(address: string, asset: string, options?: any): AxiosPromise<StakersAssetData> {
            return DefaultApiFp(configuration).getStakersAddressAndAssetData(address, asset, options)(axios, basePath);
        },
        /**
         * Returns an array containing all the pools the staker is staking in.
         * @summary Get Staker Data
         * @param {string} address Unique staker address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressData(address: string, options?: any): AxiosPromise<StakersAddressData> {
            return DefaultApiFp(configuration).getStakersAddressData(address, options)(axios, basePath);
        },
        /**
         * Returns an array containing the addresses for all stakers.
         * @summary Get Stakers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersData(options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).getStakersData(options)(axios, basePath);
        },
        /**
         * Returns an object containing global stats for all pools and all transactions.
         * @summary Get Global Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options?: any): AxiosPromise<StatsData> {
            return DefaultApiFp(configuration).getStats(options)(axios, basePath);
        },
        /**
         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode
         * @summary Get the Proxied Pool Addresses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThorchainProxiedEndpoints(options?: any): AxiosPromise<ThorchainEndpoints> {
            return DefaultApiFp(configuration).getThorchainProxiedEndpoints(options)(axios, basePath);
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetails(address: string, options?: any): AxiosPromise<Array<TxDetails>> {
            return DefaultApiFp(configuration).getTxDetails(address, options)(axios, basePath);
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {string} asset An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAddressAsset(address: string, asset: string, options?: any): AxiosPromise<Array<TxDetails>> {
            return DefaultApiFp(configuration).getTxDetailsByAddressAsset(address, asset, options)(axios, basePath);
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} address An address
         * @param {string} txid An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAddressTxId(address: string, txid: string, options?: any): AxiosPromise<Array<TxDetails>> {
            return DefaultApiFp(configuration).getTxDetailsByAddressTxId(address, txid, options)(axios, basePath);
        },
        /**
         * Return an object containing the tx details
         * @summary Get transaction
         * @param {string} asset An Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxDetailsByAsset(asset: string, options?: any): AxiosPromise<Array<TxDetails>> {
            return DefaultApiFp(configuration).getTxDetailsByAsset(asset, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price. The logo is sourced from an internal database.
     * @summary Get Asset Information
     * @param {string} asset Unique asset (CHAIN.SYMBOL)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAssetInfo(asset: string, options?: any) {
        return DefaultApiFp(this.configuration).getAssetInfo(asset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an object containing the health response of the API.
     * @summary Get Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHealth(options?: any) {
        return DefaultApiFp(this.configuration).getHealth(options)(this.axios, this.basePath);
    }

    /**
     * Returns an array containing all the assets supported on BEPSwap pools
     * @summary Get Asset Pools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPools(options?: any) {
        return DefaultApiFp(this.configuration).getPools(options)(this.axios, this.basePath);
    }

    /**
     * Returns an object containing all the pool data for that asset. All assets on BEPSwap have associated pools.
     * @summary Get Pools Data
     * @param {string} asset Unique asset (CHAIN.SYMBOL)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPoolsData(asset: string, options?: any) {
        return DefaultApiFp(this.configuration).getPoolsData(asset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an object containing staking data for the specified staker and pool.
     * @summary Get Staker Pool Data
     * @param {string} address Unique staker address
     * @param {string} asset Unique asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStakersAddressAndAssetData(address: string, asset: string, options?: any) {
        return DefaultApiFp(this.configuration).getStakersAddressAndAssetData(address, asset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array containing all the pools the staker is staking in.
     * @summary Get Staker Data
     * @param {string} address Unique staker address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStakersAddressData(address: string, options?: any) {
        return DefaultApiFp(this.configuration).getStakersAddressData(address, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array containing the addresses for all stakers.
     * @summary Get Stakers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStakersData(options?: any) {
        return DefaultApiFp(this.configuration).getStakersData(options)(this.axios, this.basePath);
    }

    /**
     * Returns an object containing global stats for all pools and all transactions.
     * @summary Get Global Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStats(options?: any) {
        return DefaultApiFp(this.configuration).getStats(options)(this.axios, this.basePath);
    }

    /**
     * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode
     * @summary Get the Proxied Pool Addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getThorchainProxiedEndpoints(options?: any) {
        return DefaultApiFp(this.configuration).getThorchainProxiedEndpoints(options)(this.axios, this.basePath);
    }

    /**
     * Return an object containing the tx details
     * @summary Get transaction
     * @param {string} address An address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTxDetails(address: string, options?: any) {
        return DefaultApiFp(this.configuration).getTxDetails(address, options)(this.axios, this.basePath);
    }

    /**
     * Return an object containing the tx details
     * @summary Get transaction
     * @param {string} address An address
     * @param {string} asset An Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTxDetailsByAddressAsset(address: string, asset: string, options?: any) {
        return DefaultApiFp(this.configuration).getTxDetailsByAddressAsset(address, asset, options)(this.axios, this.basePath);
    }

    /**
     * Return an object containing the tx details
     * @summary Get transaction
     * @param {string} address An address
     * @param {string} txid An Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTxDetailsByAddressTxId(address: string, txid: string, options?: any) {
        return DefaultApiFp(this.configuration).getTxDetailsByAddressTxId(address, txid, options)(this.axios, this.basePath);
    }

    /**
     * Return an object containing the tx details
     * @summary Get transaction
     * @param {string} asset An Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTxDetailsByAsset(asset: string, options?: any) {
        return DefaultApiFp(this.configuration).getTxDetailsByAsset(asset, options)(this.axios, this.basePath);
    }

}


/**
 * DocumentationApi - axios parameter creator
 * @export
 */
export const DocumentationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Swagger/openapi 3.0 specification generated documents.
         * @summary Get Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocs(options: any = {}): RequestArgs {
            const localVarPath = `/v1/doc`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentationApi - functional programming interface
 * @export
 */
export const DocumentationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Swagger/openapi 3.0 specification generated documents.
         * @summary Get Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocs(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DocumentationApiAxiosParamCreator(configuration).getDocs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentationApi - factory interface
 * @export
 */
export const DocumentationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Swagger/openapi 3.0 specification generated documents.
         * @summary Get Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocs(options?: any): AxiosPromise<void> {
            return DocumentationApiFp(configuration).getDocs(options)(axios, basePath);
        },
    };
};

/**
 * DocumentationApi - object-oriented interface
 * @export
 * @class DocumentationApi
 * @extends {BaseAPI}
 */
export class DocumentationApi extends BaseAPI {
    /**
     * Swagger/openapi 3.0 specification generated documents.
     * @summary Get Documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public getDocs(options?: any) {
        return DocumentationApiFp(this.configuration).getDocs(options)(this.axios, this.basePath);
    }

}


/**
 * SpecificationApi - axios parameter creator
 * @export
 */
export const SpecificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns human and machine readable swagger/openapi specification.
         * @summary Get Swagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwagger(options: any = {}): RequestArgs {
            const localVarPath = `/v1/swagger.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecificationApi - functional programming interface
 * @export
 */
export const SpecificationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns human and machine readable swagger/openapi specification.
         * @summary Get Swagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwagger(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SpecificationApiAxiosParamCreator(configuration).getSwagger(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpecificationApi - factory interface
 * @export
 */
export const SpecificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns human and machine readable swagger/openapi specification.
         * @summary Get Swagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwagger(options?: any): AxiosPromise<void> {
            return SpecificationApiFp(configuration).getSwagger(options)(axios, basePath);
        },
    };
};

/**
 * SpecificationApi - object-oriented interface
 * @export
 * @class SpecificationApi
 * @extends {BaseAPI}
 */
export class SpecificationApi extends BaseAPI {
    /**
     * Returns human and machine readable swagger/openapi specification.
     * @summary Get Swagger
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecificationApi
     */
    public getSwagger(options?: any) {
        return SpecificationApiFp(this.configuration).getSwagger(options)(this.axios, this.basePath);
    }

}


